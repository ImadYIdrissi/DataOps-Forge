name: CI Pipeline

on:
  push:
    branches:
      - "**"

env:
  ENV_FILE: .env

jobs:
  env-vars:
    name: Get Environment Variables
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.load-internal-env.outputs.python-version }}
      github-actions: ${{ steps.load-external-env.outputs.github-actions }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Load Project's Internal Environment Variables
        id: load-internal-env
        run: |
          set -x
          [ -f ${{ env.ENV_FILE }} ] && source ${{ env.ENV_FILE }}
          echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT

      - name: Load External Environment Variables
        id: load-external-env
        run: |
          set -x
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            echo "github-actions=$GITHUB_ACTIONS" >> $GITHUB_OUTPUT
          else
            echo "github-actions=false" >> $GITHUB_OUTPUT
          fi

  compile-requirements:
    name: Compile Engine and Service Requirements
    runs-on: ubuntu-latest
    needs: env-vars
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.env-vars.outputs.python-version }}

  env-setup:
    name: Setup Python and Install Dependencies
    runs-on: ubuntu-latest
    needs: [env-vars]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.env-vars.outputs.python-version }}

      - name: Compile and Install Python Dependencies
        run: |
          python -m venv $GITHUB_WORKSPACE/venv &&
          source $GITHUB_WORKSPACE/venv/bin/activate &&
          pip install --upgrade pip pip-tools &&

          pip-compile --no-strip-extras requirements.ci.in -o requirements.ci.txt &&
          pip-compile --no-strip-extras engine/requirements.engine.in -o engine/requirements.engine.txt &&
          find services -name "requirements.in" -exec pip-compile --no-strip-extras {} + &&
          find services -name "requirements.txt" -exec cat {} + > services/requirements.all_services.txt &&

          pip install -r requirements.ci.txt &&
          pip install -r engine/requirements.engine.txt &&
          pip install -r services/requirements.all_services.txt

      - name: Verify Python Version
        run: |
          source $GITHUB_WORKSPACE/venv/bin/activate
          ACTUAL_VERSION=$(python --version 2>&1 | sed 's/Python //')
          EXPECTED_VERSION="${{ needs.env-vars.outputs.python-version }}"
          echo "Actual: $ACTUAL_VERSION"
          echo "Expected: $EXPECTED_VERSION"

          if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "ERROR: Python version mismatch: expected $EXPECTED_VERSION, got $ACTUAL_VERSION"
            exit 1
          fi

      - name: Save Python Environment Cache
        uses: actions/cache@v3
        with:
          path: $GITHUB_WORKSPACE/venv
          key: ${{ runner.os }}-python-venv-${{ hashFiles('requirements.ci.txt', 'engine/requirements.engine.txt', 'services/requirements.all_services.txt') }}

  lint:
    name: Flake8 Linting
    runs-on: ubuntu-latest
    needs: [env-setup]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Python Environment Cache
        uses: actions/cache@v3
        with:
          path: $GITHUB_WORKSPACE/venv
          key: ${{ runner.os }}-python-venv-${{ hashFiles('requirements.ci.txt', 'engine/requirements.engine.txt', 'services/requirements.all_services.txt') }}

      - name: Debug Virtual Environment
        run: |
          echo "Debugging virtual environment"
          ls -l $GITHUB_WORKSPACE
          ls -l $GITHUB_WORKSPACE/venv

      - name: Run Flake8
        run: |
          source $GITHUB_WORKSPACE/venv/bin/activate
          flake8 .

  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: [env-setup]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Python Environment Cache
        uses: actions/cache@v3
        with:
          path: $GITHUB_WORKSPACE/venv
          key: ${{ runner.os }}-python-venv-${{ hashFiles('requirements.ci.txt', 'engine/requirements.engine.txt', 'services/requirements.all_services.txt') }}

      - name: Run Bandit Security Check
        run: |
          source $GITHUB_WORKSPACE/venv/bin/activate
          bandit -r .

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: env-setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Python Environment Cache
        uses: actions/cache@v3
        with:
          path: $GITHUB_WORKSPACE/venv
          key: ${{ runner.os }}-python-venv-${{ hashFiles('requirements.ci.txt', 'engine/requirements.engine.txt', 'services/requirements.all_services.txt') }}

      - name: Run Pylint
        run: |
          source $GITHUB_WORKSPACE/venv/bin/activate
          pylint .

      - name: Check Black Formatting
        run: |
          source $GITHUB_WORKSPACE/venv/bin/activate
          black --check .

      - name: Check Pydocstyle
        run: |
          source $GITHUB_WORKSPACE/venv/bin/activate
          pydocstyle .
        continue-on-error: true # Non-blocking
