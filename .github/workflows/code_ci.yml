name: CI Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - master

env:
  ENV_FILE: .env

jobs:
  env-vars:
    name: Get Environment Variables
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.load-env.outputs.python-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Load Environment Variables
        id: load-env
        run: |
          set -a
          [ -f ${{ env.ENV_FILE }} ] && source ${{ env.ENV_FILE }}
          echo "::set-output name=python-version::$PYTHON_VERSION"

  env-setup:
    name: Setup Python and Install Dependencies
    runs-on: ubuntu-latest
    needs: env-vars
    steps:
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.env-vars.outputs.python-version }}

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Development Dependencies
        run: pip install -r requirements.dev.txt

  lint:
    name: Lint Code (Light with flake8)
    runs-on: ubuntu-latest
    needs: env-setup
    steps:
      - name: Run Flake8
        run: flake8 .

  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: env-setup
    steps:
      - name: Run Bandit Security Check
        run: bandit -r .

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: env-setup
    steps:
      - name: Run Pylint
        run: pylint .

      - name: Check Black Formatting
        run: black --check .

      - name: Check Pydocstyle
        run: pydocstyle .
        continue-on-error: true # Non-blocking
